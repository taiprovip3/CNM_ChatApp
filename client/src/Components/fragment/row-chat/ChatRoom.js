/* eslint-disable no-unused-vars */
import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';
import { HiUserGroup } from 'react-icons/hi';
import { RiEmotionLaughFill, RiImageAddFill } from 'react-icons/ri';
import { MdSend, MdWavingHand } from 'react-icons/md';
import { FaHandSparkles, FaHandsWash, FaRegHandPointRight } from 'react-icons/fa';
import { GiHand } from 'react-icons/gi';
import { BiDotsVertical } from 'react-icons/bi';
import moment from 'moment';
import { arrayUnion, doc, getDoc, updateDoc } from 'firebase/firestore';
import { database, storage } from '../../../firebase';
import FirebaseGetRoomMessages from '../../service/FirebaseGetRoomMessages';
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage';
import { v4 } from 'uuid';
import { AuthContext } from '../../provider/AuthProvider';
import '../../css/Common.css';
import { AppContext } from '../../provider/AppProvider';

export default memo(function ChatRoom({ selectedRoom, setSelectedObject }) {
//Kh·ªüi t·∫°o bi·∫øn
  const { setObjectGroupModal, currentUser: { fullName, id, photoURL }, socket } = React.useContext(AuthContext);
  const { rooms } = React.useContext(AppContext);
  const [currentMessage, setCurrentMessage] = useState('');
  const [listObjectMessage, setListObjectMessage] = useState([]);
  const [selectedMyRoom, setSelectedMyRoom] = useState(selectedRoom);

  const memoIdRoom = useMemo(() => {
    return selectedMyRoom.id;
  }, [selectedMyRoom.id]);
  const roomMessages = FirebaseGetRoomMessages(memoIdRoom);

//Kh·ªüi t·∫°o useEffect
useEffect(() => {//C√≥ 1 useEffect y chang nh∆∞ n√†y b√™n RowChat.js n√≥ th·ª±c hi·ªán setSelectedObject = null
//M·ª•c ti√™u UseEffect: l·∫Øng nge sk khi rooms tr√™n firebase thay ƒë·ªïi ƒë·ªÉ rerender component cha RowChat ƒë·ªëi v·ªõi ng∆∞·ªùi th·ª±c hi·ªán r·ªùi ph√≤ng. N·∫øu ng∆∞·ªùi r·ªùi ko ph·∫£i l√† member kh√°c th√¨ useEff l√†m component cha l√† rowchat ko b·ªã rerender
    const idRoomClicked = selectedRoom.id;
    getRoomById(idRoomClicked)
      .then((newRoom) => {
        if(newRoom) {
          console.log(' newest room = ', newRoom);
          setSelectedMyRoom(newRoom);
          var test = false;
          for(var i=0; i<newRoom.listMember.length; i++) {
            if(newRoom.listMember[i] === id) {
              test = true;
              console.log('Ko c·∫ßn rerender n·∫øu giao di·ªán l√† member ko r·ªùi kh·ªèi ph√≤ng');
              break;
            }
          }
          if(!test)
            setSelectedObject(null);
        }
      });
},[id, rooms, selectedRoom.id, setSelectedObject]);
useEffect(() => {
  setListObjectMessage(roomMessages);
}, [roomMessages]);
useEffect(() => {
  socket.on("receive_message", (objectMessage) => {
      setListObjectMessage((list) => [...list, objectMessage]);
  });
}, [socket]);

//Kh·ªüi t·∫°o h√†m
  const getRoomById = async (idRoom) => {
    const room = null;
    const RoomsDocRef = doc(database, "Rooms", idRoom);
    const RoomsDocSnap = await getDoc(RoomsDocRef);
    return RoomsDocSnap.data();
  }
  const onCurrentMessageChange = useCallback((e) => {
      setCurrentMessage(e.target.value);
  }, []);
  const sendMessage = useCallback(async (msg) => {
      if(msg !== "") {
          const objectMessage = {
              idSender: id,
              nameSender: fullName,
              msg: msg,
              time: moment().format('MMMM Do YYYY, h:mm:ss a'),
              photoURL: photoURL,
              idMessage: (Math.random() + 1).toString(36).substring(2)
          }
          socket.emit("send_message", objectMessage, selectedMyRoom.id);
          setListObjectMessage((list) => [...list, objectMessage]);
          const RoomMessagesDocRef = doc(database, "RoomMessages", selectedMyRoom.id);
          await updateDoc(RoomMessagesDocRef, {
            listObjectMessage: arrayUnion(objectMessage)
          });
          setCurrentMessage('');
      }
  },[fullName, id, photoURL, selectedMyRoom.id, socket]);
  const handleSelectedImage = useCallback((e) => {
    const fileUpload = e.target.files[0];
    if(fileUpload == null){
      return;
    }
    const pathStorage = `${v4() + "__" + fileUpload.name}`;
    const imagesRef = ref(storage, 'images/' + pathStorage);
    uploadBytes(imagesRef, fileUpload)
      .then((snapshot) => {
          getDownloadURL(imagesRef)
            .then((url) => {
                sendMessage(url);
            });
      })
      .catch(err => {
          console.log(err);
      });
},[sendMessage]);
const formatMessageHaveIcon = useCallback((msg) =>{
  const icons = [
      {id: 1, image:`üòâ`, category: ':)'},
      {id: 2, image:`üòî`, category: ':('},
      {id: 3, image:`üòÇ`, category: ':))'},
      {id: 4, image:`üòµ`, category: '@@'},
      {id: 5, image:`üò≤`, category: ':0'},
      {id: 6, image:`üò≠`, category: ':(('},
      {id: 7, image:`üò°`, category: ':><'},
      {id: 8, image:`üå¥`, category: ':palm'},
      {id: 9, image:`‚òπ`, category: ':('},
      {id: 10, image:`„ã°`, category: ':/'},
      {id: 11, image:`‚úå`, category: ':2'},
      {id: 12, image:`üéÅ`, category: ':box'},
      {id: 13, image:`‚ù£Ô∏è`, category: '<3'},
      {id: 14, image:`‚ù§Ô∏è`, category: '3>'},
      {id: 15, image:`‚ùå`, category: ':x'},
      {id: 16, image:`‚úÖ`, category: ':v'},
      {id: 17, image:`üíî`, category: ':broke'},
      {id: 18, image:`üíô`, category: ':h1'},
      {id: 19, image:`üíö`, category: ':h2'},
      {id: 20, image:`üíõ`, category: ':h3'},
      {id: 21, image:`üíú`, category: ':h4'},
      {id: 22, image:`üíò`, category: ':h5'},
      {id: 23, image:`üòç`, category: ':love'},
      {id: 24, image:`‚úã`, category: ':hi'},
      {id: 25, image:`üëå`, category: ':ok'},
      {id: 26, image:`üëé`, category: ':dis'},
      {id: 27, image:`üëè`, category: ':hello'},
      {id: 28, image:`üçÄ`, category: ':clover'},
      {id: 29, image:`üî•`, category: ':fire'},
  ];
  icons.forEach(element => {
    if(msg.indexOf(element.category) > -1){
      msg = msg.replace(element.category, element.image);
    }
  });
  return msg;
}, []);
  const handleAddEmotion1 = () => {
    setCurrentMessage(currentMessage + "üòâ");
  }
  const handleAddEmotion2 = () => {
    setCurrentMessage(currentMessage + "üòî");
  }
  const handleAddEmotion3 = () => {
    setCurrentMessage(currentMessage + "üòÇ");
  }
  const handleAddEmotion4 = () => {
    setCurrentMessage(currentMessage + "üòµ");
  }
  const handleAddEmotion5 = () => {
    setCurrentMessage(currentMessage + "üò≤");
  }
  const handleAddEmotion6 = () => {
    setCurrentMessage(currentMessage + "üò≠");
  }
  const handleAddEmotion7 = () => {
    setCurrentMessage(currentMessage + "üò°");
  }
  const handleDeleteMessage = useCallback(async (objMsg) => {
    
  },[]);
  const handleRecallMessage = useCallback(async (objMsg) => {
 
  },[]);
  const handleShareMessage = useCallback(() => {

  },[]);
  const handleDetailMessage = useCallback(() => {

  },[]);

//Render component
  return (
    <div className='h-100 d-flex flex-column' style={{overflow:'hidden'}}>


        <div className='d-flex border align-items-center'>
            <div>
                <img src={selectedMyRoom.urlImage} alt="urlImage" width='45' height='45' className='rounded-circle needCursor' data-bs-toggle="modal" data-bs-target="#ManagerGroupModal" onClick={() => setObjectGroupModal(selectedMyRoom)} />
            </div>
            <div className='mx-1 flex-fill'>
                <span className='fw-bold'>{selectedMyRoom.name}</span>
                <br />
                <span className='small'><HiUserGroup /> {selectedMyRoom.listMember.length} th√†nh vi√™n</span>
            </div>
        </div>

        <div id='chatContent' className='flex-fill bg-secondary' style={{overflow: 'scroll'}}>
            
            <div className='border bg-white w-50 mt-5 mx-auto rounded p-3 text-center'>
                <span className='fs-2 fw-bold'>{selectedMyRoom.name}</span>
                <br />
                <span>{selectedMyRoom.description}</span>
                <div className='d-flex flex-wrap justify-content-center'>
                {
                  selectedMyRoom.listMember.map((o) => {
                    return <img src="https://res.cloudinary.com/dopzctbyo/image/upload/v1649587847/sample.jpg" alt="photoURL" width='45' height='45' className='rounded-circle mx-1' key={Math.random()} />;
                  })
                }
                </div>
                <hr />
                <div className="d-flex flex-wrap justify-content-around">
                    <button className='btn btn-outline-secondary btn-sm text-warning' onClick={() => sendMessage("Hi c·∫£ nh√†, ‚úã")}>Hi c·∫£ nh√†, <FaHandSparkles /></button>
                    <button className='btn btn-outline-secondary btn-sm text-warning' onClick={() => sendMessage("Xin ch√†o, ‚úã")}>Xin ch√†o, <FaHandsWash /></button>
                    <button className='btn btn-outline-secondary btn-sm text-warning' onClick={() => sendMessage("Ch√†o m·ªçi ng∆∞·ªùi, ‚úã")}>Ch√†o m·ªçi ng∆∞·ªùi, <GiHand /></button>
                    <button className='btn btn-outline-secondary btn-sm text-warning' onClick={() => sendMessage("Yo wash up, üëè")}>Yo wash up, <FaRegHandPointRight /></button>
                    <button className='btn btn-outline-secondary btn-sm text-warning' onClick={() => sendMessage("Hi all, m√¨nh l√† newbie, üëè")}>Hi all, m√¨nh l√† newbie, <MdWavingHand /></button>
                </div>
            </div>
            <br />
            {
              listObjectMessage.map((objectMessage) => {
                if(objectMessage.idSender === id)
                  return <div className='d-flex my-2 mx-3' style={{direction: 'rtl'}} key={objectMessage.idMessage}>
                            <div>
                                <img src={objectMessage.photoURL} alt="photoURL" width='45' height='45' className='rounded-circle' />
                            </div>
                            <div className='bg-info rounded p-2 mx-1'>
                                <div className="d-flex">
                                  <span className='text-white small flex-fill'>{objectMessage.nameSender}</span>
                                  <BiDotsVertical className='text-white dropdown-toggle needCursor' data-bs-toggle="dropdown" />
                                  <ul className="dropdown-menu">
                                      <li className="dropdown-item needCursor" onClick={() => handleDeleteMessage(objectMessage)}>Xo√° tin nh·∫Øn</li>
                                      <li className="dropdown-item needCursor" onClick={() => handleRecallMessage(objectMessage)}>Thu h·ªìi</li>
                                      <li className="dropdown-item needCursor" onClick={() => handleShareMessage(objectMessage)}>Chia s·∫Ω</li>
                                      <li className="dropdown-item needCursor" onClick={() => handleDetailMessage(objectMessage)}>Xem chi ti·∫øt</li>
                                  </ul>
                                </div>
                                {
                                  objectMessage.msg.includes("https://firebasestorage.googleapis.com/") ?
                                  <img src={objectMessage.msg} alt='messageIsImage' className='rounded' style={{ width:'100%' }} />
                                  :
                                  <span className='text-white fw-bold'>{objectMessage.msg}</span>
                                }
                                <br />
                                <span className='text-white small'>{objectMessage.time}</span>
                            </div>
                        </div>;
                else
                  return <div className='d-flex my-2 mx-3' key={objectMessage.idMessage}>
                            <div>
                                <img src={objectMessage.photoURL} alt="photoURL" width='45' height='45' className='rounded-circle' />
                            </div>
                            <div className='bg-white rounded p-2 mx-1'>
                                <span className='text-muted small'>{objectMessage.nameSender}</span>
                                <br />
                                {
                                  objectMessage.msg.includes("https://firebasestorage.googleapis.com/") ?
                                  <img src={objectMessage.msg} alt='messageIsImage' className='rounded' style={{ width:'100%' }} />
                                  :
                                  <span className='fw-bold'>{objectMessage.msg}</span>
                                }
                                <br />
                                <span className='text-muted small'>{objectMessage.time}</span>
                            </div>
                        </div>;
              })
            }

        </div>

        <div id='chatInput' className='d-flex align-items-center'>
            <div className="dropup">
                <RiEmotionLaughFill className='text-primary fs-1 dropdown-toggle needCursor' data-bs-toggle="dropdown" />
                <ul className="dropdown-menu d-flex p-3">
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion1}>üòâ</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion2}>üòî</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion3}>üòÇ</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion4}>üòµ</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion5}>üò≤</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion6}>üò≠</li>
                    <li className='mx-2 lead needCursor' onClick={handleAddEmotion7}>üò°</li>
                </ul>
            </div>
            <div>
                <label htmlFor="selectedImage" className='needCursor'>
                    <RiImageAddFill className='text-primary fs-1' />
                </label>
                <input type="file" name="selectedImage" id="selectedImage" accept='image/png, image/jpeg, video/*' style={{visibility: 'hidden', width:0, height:0}} onChange={(e) => handleSelectedImage(e)} />
            </div>
            <input className='form-control mx-2' type="text" placeholder='Nh·∫≠p @, nh·∫Øn tin t·ªõi b·∫°n b√®, nh√≥m chat' onChange={onCurrentMessageChange} value={formatMessageHaveIcon(currentMessage)} onKeyPress={
              e => {
                if(e.key === 'Enter'){
                  sendMessage(formatMessageHaveIcon(currentMessage));
                }
              }
            } />
            <MdSend className='text-primary fs-1 needCursor' onClick={() => sendMessage(formatMessageHaveIcon(currentMessage))} />
        </div>


    </div>
  );
})