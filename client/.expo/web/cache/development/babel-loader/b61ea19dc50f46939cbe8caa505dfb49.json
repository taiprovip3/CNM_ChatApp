{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from \"../provider/AuthProvider\";\nimport { collection, getDocs, orderBy, query, onSnapshot, addDoc, Timestamp } from 'firebase/firestore';\nimport { database } from \"../../firebase\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ChatScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _React$useContext = React.useContext(AuthContext),\n      _React$useContext$cur = _React$useContext.currentUser,\n      displayName = _React$useContext$cur.displayName,\n      email = _React$useContext$cur.email,\n      photoURL = _React$useContext$cur.photoURL,\n      socket = _React$useContext.socket;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentMessage = _useState2[0],\n      setCurrentMessage = _useState2[1];\n\n  var id = route.params.id;\n  var name = route.params.name;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messageList = _useState4[0],\n      setMessageList = _useState4[1];\n\n  var getRoomMessagesFromFirestore = function getRoomMessagesFromFirestore() {\n    var DATALIST_MESSAGES, querySnapshot;\n    return _regeneratorRuntime.async(function getRoomMessagesFromFirestore$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            DATALIST_MESSAGES = [];\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDocs(collection(database, \"RoomMessages\")));\n\n          case 3:\n            querySnapshot = _context.sent;\n            querySnapshot.forEach(function (doc) {\n              var objectMessage = {\n                room: doc.data().nameRoom,\n                author: doc.data().author.displayName,\n                photoURL: doc.data().author.photoURL,\n                msg: doc.data().msg,\n                time: doc.data().createAt.toDate()\n              };\n              setMessageList(function (list) {\n                return [].concat(_toConsumableArray(list), [objectMessage]);\n              });\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getRoomMessagesFromFirestore();\n  }, []);\n\n  var sendMessage = function sendMessage() {\n    if (currentMessage != \"\") {\n      var objectMessage = {\n        room: name,\n        author: email,\n        photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg',\n        msg: currentMessage,\n        time: new Date(Date.now()).getTime()\n      };\n      socket.emit(\"send_message\", objectMessage);\n      setMessageList(function (list) {\n        return [].concat(_toConsumableArray(list), [objectMessage]);\n      });\n      addDoc(collection(database, 'RoomMessages'), {\n        idRoom: id,\n        nameRoom: name,\n        msg: currentMessage,\n        createAt: Timestamp.now(),\n        author: {\n          displayName: email,\n          photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg'\n        }\n      });\n    }\n  };\n\n  useEffect(function () {\n    socket.on(\"receive_message\", function (data) {\n      setMessageList(function (list) {\n        return [].concat(_toConsumableArray(list), [data]);\n      });\n    });\n  }, [socket]);\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      overflow: 'hidden'\n    },\n    children: [_jsx(View, {\n      children: _jsxs(Text, {\n        children: [\"Room: \", name]\n      })\n    }), _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'lightgrey',\n        width: '100%',\n        overflow: 'scroll'\n      },\n      children: messageList.map(function (msgObject) {\n        return _jsxs(View, {\n          children: [_jsxs(View, {\n            style: {\n              backgroundColor: 'white',\n              padding: 20,\n              flexDirection: 'row'\n            },\n            children: [_jsx(View, {\n              children: _jsx(Image, {\n                source: {\n                  uri: msgObject.photoURL\n                },\n                style: {\n                  width: 50,\n                  height: 50,\n                  borderRadius: 50 / 2\n                }\n              })\n            }), _jsxs(View, {\n              style: {\n                flex: 1,\n                marginHorizontal: 8,\n                marginVertical: 5\n              },\n              children: [_jsx(Text, {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: msgObject.author\n              }), _jsx(Text, {\n                children: msgObject.msg\n              })]\n            })]\n          }, email === msgObject.email ? Math.random() : Math.random()), _jsx(View, {\n            style: {\n              borderBottomColor: 'lightgrey',\n              borderBottomWidth: 0.4,\n              borderStyle: 'dotted'\n            }\n          })]\n        });\n      })\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      children: [_jsx(TextInput, {\n        placeholder: \"Enter message...\",\n        onChangeText: function onChangeText(e) {\n          return setCurrentMessage(e);\n        },\n        value: currentMessage,\n        style: {\n          flex: 1\n        }\n      }), _jsx(Button, {\n        title: \"Send message\",\n        onPress: sendMessage\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useContext","useEffect","useState","AuthContext","collection","getDocs","orderBy","query","onSnapshot","addDoc","Timestamp","database","ChatScreen","route","navigation","currentUser","displayName","email","photoURL","socket","currentMessage","setCurrentMessage","id","params","name","messageList","setMessageList","getRoomMessagesFromFirestore","DATALIST_MESSAGES","querySnapshot","forEach","doc","objectMessage","room","data","nameRoom","author","msg","time","createAt","toDate","list","sendMessage","Date","now","getTime","emit","idRoom","on","flex","alignItems","overflow","backgroundColor","width","map","msgObject","padding","flexDirection","uri","height","borderRadius","marginHorizontal","marginVertical","fontWeight","Math","random","borderBottomColor","borderBottomWidth","borderStyle","e"],"sources":["F:/Hoc ki 4/Cong nghe moi/AppChat/client/Components/screen/ChatScreen.js"],"sourcesContent":["import { View, Text, Button, TextInput, Image } from 'react-native'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { AuthContext } from '../provider/AuthProvider';\r\nimport { collection, getDocs, orderBy, query, onSnapshot, addDoc, Timestamp } from 'firebase/firestore';\r\nimport { database } from '../../firebase';\r\n\r\nexport default function ChatScreen({ route, navigation }) {\r\n\r\n    const { currentUser:{\r\n        displayName,\r\n        email,\r\n        photoURL\r\n    }, socket } = React.useContext(AuthContext);\r\n    const [currentMessage, setCurrentMessage] = useState('');\r\n    const { id } = route.params;\r\n    const { name } = route.params;\r\n    const [messageList, setMessageList] = useState([]);\r\n\r\n    //Get first messages[] from firestore\r\n    const getRoomMessagesFromFirestore = async () => {\r\n      const DATALIST_MESSAGES = [];\r\n      const querySnapshot = await getDocs(collection(database, \"RoomMessages\"));\r\n      querySnapshot.forEach((doc) => {\r\n        const objectMessage = {\r\n          room: doc.data().nameRoom,\r\n          author: doc.data().author.displayName,\r\n          photoURL: doc.data().author.photoURL,\r\n          msg: doc.data().msg,\r\n          time: doc.data().createAt.toDate()\r\n        }\r\n        setMessageList((list) => [...list, objectMessage]);\r\n      });\r\n    }\r\n    useEffect(() => {\r\n      getRoomMessagesFromFirestore();\r\n    }, []);\r\n\r\n    //Send message\r\n    const sendMessage = () => {\r\n        if(currentMessage != \"\") {\r\n            const objectMessage = {\r\n                room: name,\r\n                author: email,\r\n                photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg',\r\n                msg: currentMessage,\r\n                time: new Date(Date.now()).getTime()\r\n            }\r\n            socket.emit(\"send_message\", objectMessage);\r\n            setMessageList((list) => [...list, objectMessage]);\r\n            addDoc(collection(database, 'RoomMessages'), {\r\n              idRoom: id,\r\n              nameRoom: name,\r\n              msg: currentMessage,\r\n              createAt: Timestamp.now(),\r\n              author: {\r\n                displayName: email,\r\n                photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg'\r\n              }\r\n            });\r\n        }\r\n    }\r\n\r\n    //Listening message\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            setMessageList((list) => [...list, data]);\r\n        });\r\n    }, [socket]);\r\n    \r\n\r\n  return (\r\n    <View style={{flex:1, alignItems:'center', overflow:'hidden'}}>\r\n      <View>\r\n        <Text>Room: {name}</Text>\r\n      </View>\r\n      <View style={{flex:1,backgroundColor:'lightgrey', width:'100%', overflow:'scroll'}}>\r\n        {messageList.map((msgObject) => {\r\n            return <View>\r\n                      <View style={{backgroundColor:'white', padding:20, flexDirection:'row'}} key={email === msgObject.email ? Math.random() : Math.random()}>\r\n                          <View>\r\n                            <Image source={{uri:msgObject.photoURL}} style={{width:50,height:50,borderRadius:50/2}} />\r\n                          </View>\r\n                          <View style={{flex:1, marginHorizontal:8, marginVertical:5}}>\r\n                            <Text style={{fontWeight:'bold'}}>{msgObject.author}</Text>\r\n                            <Text>{msgObject.msg}</Text>\r\n                          </View>\r\n                      </View>\r\n                      <View\r\n                        style={{\r\n                          borderBottomColor: 'lightgrey',\r\n                          borderBottomWidth: 0.4,\r\n                          borderStyle: 'dotted'\r\n                        }}\r\n                      />\r\n                  </View>\r\n                  ;\r\n        })}\r\n      </View>\r\n      <View style={{flexDirection:'row'}}>\r\n        <TextInput placeholder='Enter message...' onChangeText={(e) => setCurrentMessage(e)} value={currentMessage} style={{flex:1}} />\r\n        <Button title='Send message' onPress={sendMessage}/>\r\n      </View>\r\n    </View>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}