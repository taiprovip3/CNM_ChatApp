{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"onKeyPress\", \"InputLeftElement\", \"InputRightElement\", \"leftElement\", \"rightElement\"],\n    _excluded2 = [\"ariaLabel\", \"accessibilityLabel\", \"type\", \"isFullWidth\", \"isDisabled\", \"isReadOnly\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"onFocus\", \"onBlur\", \"wrapperRef\", \"_stack\", \"_input\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useToken } from \"../../../hooks\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs, resolveStackStyleInput } from \"../../../utils\";\nimport { Stack } from \"../Stack\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nvar StyledInput = makeStyledComponent(TextInput);\n\nvar Input = function Input(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      _onKeyPress = _ref2.onKeyPress,\n      InputLeftElement = _ref2.InputLeftElement,\n      InputRightElement = _ref2.InputRightElement,\n      leftElement = _ref2.leftElement,\n      rightElement = _ref2.rightElement,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  }),\n      ariaLabel = _usePropsResolution.ariaLabel,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      type = _usePropsResolution.type,\n      isFullWidth = _usePropsResolution.isFullWidth,\n      isDisabled = _usePropsResolution.isDisabled,\n      isReadOnly = _usePropsResolution.isReadOnly,\n      fontFamily = _usePropsResolution.fontFamily,\n      fontWeight = _usePropsResolution.fontWeight,\n      fontStyle = _usePropsResolution.fontStyle,\n      placeholderTextColor = _usePropsResolution.placeholderTextColor,\n      selectionColor = _usePropsResolution.selectionColor,\n      underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      wrapperRef = _usePropsResolution.wrapperRef,\n      _stack = _usePropsResolution._stack,\n      _input = _usePropsResolution._input,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.border), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.background), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  var resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  var resolvedSelectionColor = useToken('colors', selectionColor);\n  var resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n  resolvedProps.focusOutlineColor = useToken('colors', resolvedProps.focusOutlineColor);\n  resolvedProps.invalidOutlineColor = useToken('colors', resolvedProps.invalidOutlineColor);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.focusOutlineColor);\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.invalidOutlineColor);\n  }\n\n  return React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\n\nexport default memo(forwardRef(Input));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useToken","useFormControl","useHasResponsiveProps","useHover","extractInObject","stylingProps","usePropsResolution","mergeRefs","resolveStackStyleInput","Stack","makeStyledComponent","useResolvedFontFamily","StyledInput","TextInput","Input","ref","isHoveredProp","isHovered","isFocusedProp","isFocused","onKeyPress","InputLeftElement","InputRightElement","leftElement","rightElement","props","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","useState","setIsFocused","handleFocus","focusState","callback","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","margin","border","layout","flexbox","position","background","layoutProps","nonLayoutProps","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","focusOutlineColor","invalidOutlineColor","borderColor","style","variant","secureTextEntry","accessible","editable","w","undefined","e","persist"],"sources":["Input.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs, resolveStackStyleInput } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  resolvedProps.focusOutlineColor = useToken(\n    'colors',\n    resolvedProps.focusOutlineColor\n  );\n  //@ts-ignore\n  resolvedProps.invalidOutlineColor = useToken(\n    'colors',\n    resolvedProps.invalidOutlineColor\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.focusOutlineColor\n    );\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.invalidOutlineColor\n    );\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}