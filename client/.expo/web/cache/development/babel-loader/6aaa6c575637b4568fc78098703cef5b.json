{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { AuthContext } from \"../provider/AuthProvider\";\nimport { collection, getDocs, orderBy, query, onSnapshot, addDoc, Timestamp, where, doc, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { database } from \"../../firebase\";\nimport FirebaseGetRoomMessages from \"../service/FirebaseGetRoomMessages\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ChatScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useContext = useContext(AuthContext),\n      _useContext$currentUs = _useContext.currentUser,\n      id = _useContext$currentUs.id,\n      email = _useContext$currentUs.email,\n      photoURL = _useContext$currentUs.photoURL,\n      fullName = _useContext$currentUs.fullName,\n      socket = _useContext.socket;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentMessage = _useState2[0],\n      setCurrentMessage = _useState2[1];\n\n  var idRoom = route.params.idRoom;\n  var nameRoom = route.params.nameRoom;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      listObjectMessage = _useState4[0],\n      setListObjectMessage = _useState4[1];\n\n  var memoIdRoom = useMemo(function () {\n    return idRoom;\n  }, [idRoom]);\n  var roomMessages = FirebaseGetRoomMessages(memoIdRoom);\n  useEffect(function () {\n    setListObjectMessage(roomMessages);\n  }, [roomMessages]);\n  useEffect(function () {\n    socket.on(\"receive_message\", function (objectMessage) {\n      setListObjectMessage(function (list) {\n        return [].concat(_toConsumableArray(list), [objectMessage]);\n      });\n    });\n  }, [socket]);\n\n  var sendMessage = function sendMessage() {\n    var objectMessage, RoomMessagesDocRef;\n    return _regeneratorRuntime.async(function sendMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(currentMessage != \"\")) {\n              _context.next = 7;\n              break;\n            }\n\n            objectMessage = {\n              idSender: id,\n              nameSender: fullName,\n              msg: currentMessage,\n              time: Timestamp.now(),\n              photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg'\n            };\n            socket.emit(\"send_message\", objectMessage, idRoom);\n            setListObjectMessage(function (list) {\n              return [].concat(_toConsumableArray(list), [objectMessage]);\n            });\n            RoomMessagesDocRef = doc(database, \"RoomMessages\", idRoom);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(updateDoc(RoomMessagesDocRef, {\n              listObjectMessage: arrayUnion(objectMessage)\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center'\n    },\n    children: [_jsx(View, {\n      children: _jsxs(Text, {\n        children: [\"Room: \", nameRoom]\n      })\n    }), _jsx(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'lightgrey',\n        width: '100%'\n      },\n      children: listObjectMessage.map(function (msgObject) {\n        return _jsxs(View, {\n          children: [_jsxs(View, {\n            style: {\n              backgroundColor: 'white',\n              padding: 20,\n              flexDirection: 'row'\n            },\n            children: [_jsx(View, {\n              children: _jsx(Image, {\n                source: {\n                  uri: msgObject.photoURL\n                },\n                style: {\n                  width: 50,\n                  height: 50,\n                  borderRadius: 50 / 2\n                }\n              })\n            }), _jsxs(View, {\n              style: {\n                flex: 1,\n                marginHorizontal: 8,\n                marginVertical: 5\n              },\n              children: [_jsx(Text, {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: msgObject.author\n              }), _jsx(Text, {\n                children: msgObject.msg\n              })]\n            })]\n          }), _jsx(View, {\n            style: {\n              borderBottomColor: 'lightgrey',\n              borderBottomWidth: 0.4,\n              borderStyle: 'dotted'\n            }\n          })]\n        }, email === msgObject.email ? Math.random() : Math.random());\n      })\n    }), _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        width: '100%',\n        padding: 10\n      },\n      children: [_jsx(TextInput, {\n        placeholder: \"Enter message...\",\n        onChangeText: function onChangeText(e) {\n          return setCurrentMessage(e);\n        },\n        value: currentMessage,\n        style: {\n          flex: 1\n        }\n      }), _jsx(Button, {\n        title: \"Send message\",\n        onPress: sendMessage\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useContext","useEffect","useMemo","useState","AuthContext","collection","getDocs","orderBy","query","onSnapshot","addDoc","Timestamp","where","doc","updateDoc","arrayUnion","database","FirebaseGetRoomMessages","ChatScreen","route","navigation","currentUser","id","email","photoURL","fullName","socket","currentMessage","setCurrentMessage","idRoom","params","nameRoom","listObjectMessage","setListObjectMessage","memoIdRoom","roomMessages","on","objectMessage","list","sendMessage","idSender","nameSender","msg","time","now","emit","RoomMessagesDocRef","flex","alignItems","backgroundColor","width","map","msgObject","padding","flexDirection","uri","height","borderRadius","marginHorizontal","marginVertical","fontWeight","author","borderBottomColor","borderBottomWidth","borderStyle","Math","random","e"],"sources":["F:/Hoc ki 4/Cong nghe moi/AppChat/client/Components/screen/ChatScreen.js"],"sourcesContent":["import { View, Text, Button, TextInput, Image } from 'react-native'\r\nimport React, { useContext, useEffect, useMemo, useState } from 'react'\r\nimport { AuthContext } from '../provider/AuthProvider';\r\nimport { collection, getDocs, orderBy, query, onSnapshot, addDoc, Timestamp, where, doc, updateDoc, arrayUnion } from 'firebase/firestore';\r\nimport { database } from '../../firebase';\r\nimport FirebaseGetRoomMessages from '../service/FirebaseGetRoomMessages';\r\n\r\nexport default function ChatScreen({ route, navigation }) {\r\n//Khởi tạo biến\r\n    const { currentUser:{\r\n        id,\r\n        email,\r\n        photoURL,\r\n        fullName\r\n    }, socket } = useContext(AuthContext);\r\n    const [currentMessage, setCurrentMessage] = useState('');\r\n    const { idRoom } = route.params;\r\n    const { nameRoom } = route.params;\r\n    const [listObjectMessage, setListObjectMessage] = useState([]);\r\n    const memoIdRoom = useMemo(() => {\r\n      return idRoom;\r\n    }, [idRoom]);\r\n    const roomMessages = FirebaseGetRoomMessages(memoIdRoom);\r\n    \r\n    useEffect(() => {\r\n      setListObjectMessage(roomMessages);\r\n    }, [roomMessages]);\r\n    useEffect(() => {\r\n      socket.on(\"receive_message\", (objectMessage) => {\r\n          setListObjectMessage((list) => [...list, objectMessage]);\r\n      });\r\n    }, [socket]);\r\n\r\n//Hàm khởi tạo cần thiết\r\n    const sendMessage = async () => {\r\n        if(currentMessage != \"\") {\r\n            const objectMessage = {\r\n                idSender: id,\r\n                nameSender: fullName,\r\n                msg: currentMessage,\r\n                time: Timestamp.now(),\r\n                photoURL: 'https://res.cloudinary.com/dopzctbyo/image/upload/v1649587869/cld-sample.jpg'\r\n            }\r\n            socket.emit(\"send_message\", objectMessage, idRoom);\r\n            setListObjectMessage((list) => [...list, objectMessage]);\r\n            const RoomMessagesDocRef = doc(database, \"RoomMessages\", idRoom);\r\n            await updateDoc(RoomMessagesDocRef, {\r\n              listObjectMessage: arrayUnion(objectMessage)\r\n            });\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <View style={{flex:1, alignItems:'center'}}>\r\n      <View>\r\n        <Text>Room: {nameRoom}</Text>\r\n      </View>\r\n      <View style={{flex:1,backgroundColor:'lightgrey', width:'100%'}}>\r\n        {listObjectMessage.map((msgObject) => {\r\n            return <View key={email === msgObject.email ? Math.random() : Math.random()}>\r\n                      <View style={{backgroundColor:'white', padding:20, flexDirection:'row'}}>\r\n                          <View>\r\n                            <Image source={{uri:msgObject.photoURL}} style={{width:50,height:50,borderRadius:50/2}} />\r\n                          </View>\r\n                          <View style={{flex:1, marginHorizontal:8, marginVertical:5}}>\r\n                            <Text style={{fontWeight:'bold'}}>{msgObject.author}</Text>\r\n                            <Text>{msgObject.msg}</Text>\r\n                          </View>\r\n                      </View>\r\n                      <View\r\n                        style={{\r\n                          borderBottomColor: 'lightgrey',\r\n                          borderBottomWidth: 0.4,\r\n                          borderStyle: 'dotted'\r\n                        }}\r\n                      />\r\n                  </View>\r\n                  ;\r\n        })}\r\n      </View>\r\n      <View style={{flexDirection:'row', width:'100%', padding:10}}>\r\n        <TextInput placeholder='Enter message...' onChangeText={(e) => setCurrentMessage(e)} value={currentMessage} style={{flex:1}} />\r\n        <Button title='Send message' onPress={sendMessage}/>\r\n      </View>\r\n    </View>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}