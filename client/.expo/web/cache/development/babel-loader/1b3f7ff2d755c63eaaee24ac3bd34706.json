{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"],\n    _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n    _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport stableHash from 'stable-hash';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n      inputProps = _ref2.inputProps,\n      combinedProps = _ref2.combinedProps,\n      children = _ref2.children,\n      wrapperRef = _ref2.wrapperRef,\n      isHoveredProp = _ref2.isHovered,\n      isPressedProp = _ref2.isPressed,\n      isFocusedProp = _ref2.isFocused,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var isInvalid = combinedProps.isInvalid,\n      isReadOnly = combinedProps.isReadOnly,\n      isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n      isChecked = inputProps.checked;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _React$useState = React.useState(isFocusedProp),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(isPressedProp),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isPressed = _React$useState4[0],\n      setPressed = _React$useState4[1];\n\n  var handleFocus = function handleFocus() {\n    setFocused(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    isFocusedProp ? setFocused(true) : setFocused(false);\n  };\n\n  var handlePressIn = function handlePressIn() {\n    setPressed(true);\n  };\n\n  var handlePressOut = function handlePressOut() {\n    isPressedProp ? setPressed(true) : setPressed(false);\n  };\n\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressed,\n    isFocused: isFocused\n  }),\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return React.cloneElement(icon, _objectSpread({}, _icon));\n  };\n\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(\"div\", {\n    onMouseDown: handlePressIn,\n    onMouseUp: handlePressOut\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }))), component));\n}));\n\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n      children = _ref3.children,\n      wrapperRef = _ref3.wrapperRef,\n      isHoveredProp = _ref3.isHovered,\n      isPressed = _ref3.isPressed,\n      isFocusedProp = _ref3.isFocused,\n      isFocusVisibleProp = _ref3.isFocusVisible,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var _contextState$state;\n\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  var contextCombinedProps = React.useMemo(function () {\n    return _objectSpread({}, combinedProps);\n  }, [stableHash(combinedProps)]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nexport default memo(forwardRef(Radio));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","stableHash","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","ref","icon","inputProps","combinedProps","children","wrapperRef","isHoveredProp","isHovered","isPressedProp","isPressed","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","props","isInvalid","isReadOnly","isIndeterminate","isDisabled","disabled","isChecked","checked","_ref","useRef","mergedRefs","focusProps","useState","setFocused","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","opacity","accessibilityRole","onMouseDown","onMouseUp","onFocus","onBlur","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"sources":["Radio.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}