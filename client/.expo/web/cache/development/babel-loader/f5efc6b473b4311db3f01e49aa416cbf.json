{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"isFocusVisible\"],\n    _excluded2 = [\"onValueChange\", \"selectedValue\", \"children\", \"dropdownIcon\", \"dropdownCloseIcon\", \"dropdownOpenIcon\", \"placeholder\", \"accessibilityLabel\", \"defaultValue\", \"_item\", \"_selectedItem\", \"onOpen\", \"onClose\", \"optimized\", \"customDropdownIconProps\", \"_actionSheetContent\", \"_actionSheetBody\", \"_webSelect\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport Box from \"../Box\";\nimport { Input } from \"../Input\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { ChevronDownIcon } from \"../Icon/Icons\";\nimport { ScrollView } from \"../../basic/ScrollView\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { FlatList } from \"../../basic/FlatList\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { Pressable } from \"../Pressable\";\nexport var SelectContext = React.createContext({\n  onValueChange: function onValueChange() {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\n\nvar Select = function Select(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  var flatListData = [];\n  var isDisabled = selectProps.disabled;\n  var tempFix = '__NativebasePlaceholder__';\n\n  var _ref = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isOpen = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isFocused = _React$useState4[0],\n      setIsFocused = _React$useState4[1];\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _useHover = useHover({\n    isDisabled: isDisabled\n  }, _ref),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _usePropsResolution = usePropsResolution('Select', props, {\n    isDisabled: isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }, undefined),\n      onValueChange = _usePropsResolution.onValueChange,\n      selectedValue = _usePropsResolution.selectedValue,\n      children = _usePropsResolution.children,\n      dropdownIcon = _usePropsResolution.dropdownIcon,\n      dropdownCloseIcon = _usePropsResolution.dropdownCloseIcon,\n      dropdownOpenIcon = _usePropsResolution.dropdownOpenIcon,\n      placeholder = _usePropsResolution.placeholder,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      defaultValue = _usePropsResolution.defaultValue,\n      _item = _usePropsResolution._item,\n      _selectedItem = _usePropsResolution._selectedItem,\n      onOpen = _usePropsResolution.onOpen,\n      onClose = _usePropsResolution.onClose,\n      optimized = _usePropsResolution.optimized,\n      customDropdownIconProps = _usePropsResolution.customDropdownIconProps,\n      _actionSheetContent = _usePropsResolution._actionSheetContent,\n      _actionSheetBody = _usePropsResolution._actionSheetBody,\n      _webSelect = _usePropsResolution._webSelect,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _useControllableState = useControllableState({\n    value: selectedValue,\n    defaultValue: defaultValue,\n    onChange: function onChange(newValue) {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var itemsList = React.Children.map(children !== null && children !== void 0 ? children : [], function (child) {\n    return {\n      label: child.props.label,\n      value: child.props.value\n    };\n  });\n  var selectedItemArray = itemsList.filter(function (item) {\n    return item.value === value;\n  });\n  var selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  var contextValue = React.useMemo(function () {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : React.createElement(ChevronDownIcon, customDropdownIconProps);\n\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.map(children, function (child) {\n      flatListData.push(child.props);\n    });\n  }\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 1),\n      layoutProps = _extractInObject2[0];\n\n  var commonInput = React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, resolvedProps, {\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label,\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled\n  }));\n  return Platform.OS === 'web' ? React.createElement(Box, null, React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]),\n    style: _webSelect,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: function onFocus() {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: function onBlur() {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }), React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput) : React.createElement(React.Fragment, null, React.createElement(Pressable, _extends({\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), React.createElement(Actionsheet, {\n    isOpen: isOpen,\n    onClose: handleClose\n  }, React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData,\n    keyExtractor: function keyExtractor(_item, index) {\n      return index.toString();\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      var isSelected = selectedValue === item.value;\n      return React.createElement(Actionsheet.Item, _extends({\n        onPress: function onPress() {\n          if (!isDisabled) {\n            setValue(item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item.label);\n    }\n  })) : React.createElement(ScrollView, _actionSheetBody, React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children)))));\n};\n\nexport default memo(forwardRef(Select));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","ref","isHoveredProp","isHovered","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","props","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","useState","isOpen","setIsOpen","setIsFocused","focusProps","hoverProps","undefined","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","customDropdownIconProps","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","value","onChange","newValue","setValue","itemsList","Children","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","margin","flexbox","position","layoutProps","commonInput","InputRightElement","importantForAccessibility","editable","focusable","Platform","OS","readOnly","required","style","e","target","onFocus","onBlur","onPress","Keyboard","dismiss","accessibilityRole","Content","data","keyExtractor","index","toString","renderItem","isSelected","Item","accessibilityState","selected","Provider"],"sources":["Select.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n  const itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children ?? [],\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === value\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.map(children, (child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...resolvedProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem?.label}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n    />\n  );\n\n  return Platform.OS === 'web' ? (\n    <Box>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        style={_webSelect}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  ) : (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}