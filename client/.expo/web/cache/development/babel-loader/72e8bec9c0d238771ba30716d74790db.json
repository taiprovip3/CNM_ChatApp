{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport React, { useState } from 'react';\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore';\nimport { database } from \"../../firebase\";\n\nvar FirebaseGetRooms = function FirebaseGetRooms(owner) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      rooms = _useState2[0],\n      setRooms = _useState2[1];\n\n  React.useEffect(function () {\n    var RoomsCollectionRef = collection(database, 'Rooms');\n    var q = query(RoomsCollectionRef, where(\"listMember\", \"array-contains\", owner), orderBy('createAt', 'desc'));\n    var unsubcribe = onSnapshot(q, function (querySnapShot) {\n      var documents = querySnapShot.docs.map(function (doc) {\n        return doc.data();\n      });\n      setRooms(documents);\n    });\n    return unsubcribe;\n  }, [owner]);\n  return rooms;\n};\n\nexport default FirebaseGetRooms;","map":{"version":3,"names":["React","useState","collection","onSnapshot","orderBy","query","where","database","FirebaseGetRooms","owner","rooms","setRooms","useEffect","RoomsCollectionRef","q","unsubcribe","querySnapShot","documents","docs","map","doc","data"],"sources":["F:/Hoc ki 4/Cong nghe moi/AppChat/client/Components/service/FirebaseGetRooms.js"],"sourcesContent":["import { View, Text } from 'react-native';\r\nimport React, { useState } from 'react';\r\nimport { collection, onSnapshot, orderBy, query, where } from 'firebase/firestore';\r\nimport { database } from '../../firebase';\r\n\r\n//UseEffect này luôn lắng nge\r\n//UseEffect này chỉ chạy lại khi biến owner lớp cha gọi nó thay đổi giá trị truyền vào\r\n//Nếu thay đổi hàm sẽ đc thực thi => trả về danh sách rooms mới.\r\nconst FirebaseGetRooms = (owner) => {\r\n    const [rooms, setRooms] = useState([]);\r\n    React.useEffect(() => {\r\n        const RoomsCollectionRef = collection(database, 'Rooms');\r\n        const q = query(RoomsCollectionRef, where(\"listMember\", \"array-contains\", owner) , orderBy('createAt', 'desc'));\r\n        const unsubcribe = onSnapshot(q, (querySnapShot) => {\r\n            const documents = querySnapShot.docs.map( (doc) => (doc.data()) );\r\n            setRooms(documents);\r\n        });\r\n        return unsubcribe;\r\n    },[owner]);\r\n    return rooms;\r\n};\r\n\r\nexport default FirebaseGetRooms;"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,OAAjC,EAA0CC,KAA1C,EAAiDC,KAAjD,QAA8D,oBAA9D;AACA,SAASC,QAAT;;AAKA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;EAChC,gBAA0BR,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOS,KAAP;EAAA,IAAcC,QAAd;;EACAX,KAAK,CAACY,SAAN,CAAgB,YAAM;IAClB,IAAMC,kBAAkB,GAAGX,UAAU,CAACK,QAAD,EAAW,OAAX,CAArC;IACA,IAAMO,CAAC,GAAGT,KAAK,CAACQ,kBAAD,EAAqBP,KAAK,CAAC,YAAD,EAAe,gBAAf,EAAiCG,KAAjC,CAA1B,EAAoEL,OAAO,CAAC,UAAD,EAAa,MAAb,CAA3E,CAAf;IACA,IAAMW,UAAU,GAAGZ,UAAU,CAACW,CAAD,EAAI,UAACE,aAAD,EAAmB;MAChD,IAAMC,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAwB,UAACC,GAAD;QAAA,OAAUA,GAAG,CAACC,IAAJ,EAAV;MAAA,CAAxB,CAAlB;MACAV,QAAQ,CAACM,SAAD,CAAR;IACH,CAH4B,CAA7B;IAIA,OAAOF,UAAP;EACH,CARD,EAQE,CAACN,KAAD,CARF;EASA,OAAOC,KAAP;AACH,CAZD;;AAcA,eAAeF,gBAAf"},"metadata":{},"sourceType":"module"}