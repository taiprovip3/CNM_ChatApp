{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport _useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { useSubscription } from 'use-subscription';\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\nexport var useAppState = function useAppState() {\n  var subscription = React.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        AppState.addEventListener('change', callback);\n        return function () {\n          return AppState.removeEventListener('change', callback);\n        };\n      }\n    };\n  }, []);\n  return useSubscription(subscription);\n};\nexport var useColorScheme = function useColorScheme() {\n  var colorScheme = _useColorScheme();\n\n  var _useState = useState(colorScheme),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentScheme = _useState2[0],\n      setCurrentScheme = _useState2[1];\n\n  var appState = useAppState();\n  useEffect(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState3 = useState(initialColorMode),\n      _useState4 = _slicedToArray(_useState3, 2),\n      colorMode = _useState4[0],\n      setRawMode = _useState4[1];\n\n  var setColorMode = React.useCallback(function _callee(val) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regeneratorRuntime.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","HybridContext","useSubscription","useColorMode","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","addEventListener","removeEventListener","useColorScheme","colorScheme","_useColorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","get","value","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        AppState.addEventListener('change', callback);\n        return () => AppState.removeEventListener('change', callback);\n      },\n    }),\n    []\n  );\n  return useSubscription(subscription);\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}