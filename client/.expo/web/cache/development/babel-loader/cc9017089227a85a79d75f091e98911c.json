{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"_image\", \"_badgeSize\", \"source\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Box, Image } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Avatar = function Avatar(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var _usePropsResolution = usePropsResolution('Avatar', props),\n      _image = _usePropsResolution._image,\n      _badgeSize = _usePropsResolution._badgeSize,\n      source = _usePropsResolution.source,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var Badge = React.createElement(React.Fragment, null);\n  var remainingChildren = [];\n  React.Children.map(children, function (child) {\n    if (typeof (child === null || child === void 0 ? void 0 : child.type) === 'object' && (child === null || child === void 0 ? void 0 : child.type.displayName) === 'AvatarBadge') {\n      Badge = React.cloneElement(child, {\n        size: _badgeSize[0]\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, resolvedProps, !!(source !== null && source !== void 0 && source.uri) && !error ? React.createElement(Image, _extends({\n    source: source,\n    onError: function onError() {\n      setError(true);\n    }\n  }, _image, {\n    ref: ref\n  })) : remainingChildren.length !== 0 && remainingChildren, Badge);\n};\n\nexport default memo(forwardRef(Avatar));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT,EAAcC,KAAd;AACA,SAASC,kBAAT;AAEA,SAASC,qBAAT;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAuCC,GAAvC,EAAoD;EAAA,IAAjDC,QAAiD,QAAjDA,QAAiD;EAAA,IAApCC,KAAoC;;EACjE,sBAA0BV,KAAK,CAACW,QAANX,CAAe,KAAfA,CAA1B;EAAA;EAAA,IAAOY,KAAP;EAAA,IAAcC,QAAd;;EACA,0BAAyDR,kBAAkB,CACzE,QADyE,EAEzEK,KAFyE,CAA3E;EAAA,IAAQI,MAAR,uBAAQA,MAAR;EAAA,IAAgBC,UAAhB,uBAAgBA,UAAhB;EAAA,IAA4BC,MAA5B,uBAA4BA,MAA5B;EAAA,IAAuCC,aAAvC;;EAKA,IAAIC,KAAK,GAAGlB,yCAAZ;EACA,IAAMmB,iBAAgC,GAAG,EAAzC;EAEAnB,KAAK,CAACoB,QAANpB,CAAeqB,GAAfrB,CAAmBS,QAAnBT,EAA8BsB,eAAD,EAAW;IACtC,IACE,QAAOA,KAAP,SAAOA,SAAP,WAAOA,GAAP,MAAOA,QAAK,CAAEC,IAAd,MAAuB,QAAvB,IACA,MAAK,SAALD,SAAK,WAALA,iBAAK,CAAEC,IAAPD,CAAYE,WAAZ,MAA4B,aAF9B,EAGE;MACAN,KAAK,GAAGlB,KAAK,CAACyB,YAANzB,CAAmBsB,KAAnBtB,EAA0B;QAAE0B,IAAI,EAAEX,UAAU,CAAC,CAAD;MAAlB,CAA1Bf,CAARkB;IAJF,OAKO;MACLC,iBAAiB,CAACQ,IAAlBR,CAAuBG,KAAvBH;IACD;EARH;;EAYA,IAAIb,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OACEV,oBAACG,GAAD,EAASc,aAAT,EACG,CAAC,EAACD,MAAD,SAACA,UAAD,WAACA,UAAM,CAAEY,GAAT,CAAD,IAAiB,CAAChB,KAAlB,GACCZ,oBAACI,KAAD;IACEY,MAAM,EAAEA,MADV;IAEEa,OAAO,EAAE,mBAAM;MACbhB,QAAQ,CAAC,IAAD,CAARA;IACD;EAJH,GAKMC,MALN;IAMEN,GAAG,EAAEA;EANP,GADD,GAUCW,iBAAiB,CAACW,MAAlBX,KAA6B,CAA7BA,IAAkCA,iBAXtC,EAaGD,KAbH,CADF;AA1BF;;AA6CA,eAAejB,IAAI,CAACC,UAAU,CAACK,MAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","Image","usePropsResolution","useHasResponsiveProps","Avatar","ref","children","props","useState","error","setError","_image","_badgeSize","source","resolvedProps","Badge","remainingChildren","Children","map","child","type","displayName","cloneElement","size","push","uri","onError","length"],"sources":["Avatar.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, { size: _badgeSize[0] });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps}>\n      {!!source?.uri && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}